/**
 * ðŸ§ª MODO DE TESTE PARA DESENVOLVIMENTO LOCAL
 * 
 * Este arquivo permite testar a interface de Ã¡udio sem depender do backend estar 100% funcional.
 * Pode ser usado quando o backend retorna erro 500 ou nÃ£o estÃ¡ completamente implementado.
 */

import { useState, useRef, useCallback } from 'react';
import DarkSwal from '../components/DarkSwal';

const useAudioProcessingTestMode = () => {
    const [isProcessing, setIsProcessing] = useState(false);
    const [currentStep, setCurrentStep] = useState(0);
    const [sessionId, setSessionId] = useState(null);
    const [chunks, setChunks] = useState([]);
    const [transcription, setTranscription] = useState('');
    const [progress, setProgress] = useState({ total: 0, done: 0, status: 'idle' });
    const [error, setError] = useState(null);
    const [questionsGenerated, setQuestionsGenerated] = useState(false);
    
    const progressIntervalRef = useRef(null);

    const steps = [
        { label: 'Upload do Ã¡udio', description: 'Enviando arquivo para o servidor...' },
        { label: 'DivisÃ£o em chunks', description: 'Dividindo Ã¡udio em segmentos...' },
        { label: 'TranscriÃ§Ã£o', description: 'Transcrevendo Ã¡udio com IA...' },
        { label: 'ConcatenaÃ§Ã£o', description: 'Concatenando transcriÃ§Ãµes...' },
        { label: 'GeraÃ§Ã£o de questÃµes', description: 'Gerando questÃµes...' },
        { label: 'Finalizado', description: 'Processo concluÃ­do!' }
    ];

    const cleanup = useCallback(() => {
        if (progressIntervalRef.current) {
            clearInterval(progressIntervalRef.current);
            progressIntervalRef.current = null;
        }
    }, []);

    const resetState = useCallback(() => {
        cleanup();
        setIsProcessing(false);
        setCurrentStep(0);
        setSessionId(null);
        setChunks([]);
        setTranscription('');
        setProgress({ total: 0, done: 0, status: 'idle' });
        setError(null);
        setQuestionsGenerated(false);
    }, [cleanup]);

    // FunÃ§Ã£o para simular delay
    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

    // Simular progresso step by step
    const simulateProgress = useCallback(async () => {
        const stepDelays = [2000, 1500, 8000, 2000, 3000]; // Delays para cada etapa
        
        for (let step = 0; step < stepDelays.length; step++) {
            setCurrentStep(step);
            
            // Simular progresso especÃ­fico para transcriÃ§Ã£o
            if (step === 2) {
                setProgress({ total: 4, done: 0, status: 'processing' });
                
                // Simular progresso gradual da transcriÃ§Ã£o
                for (let chunk = 0; chunk < 4; chunk++) {
                    await delay(2000);
                    setProgress(prev => ({ ...prev, done: chunk + 1 }));
                }
            }
            
            await delay(stepDelays[step]);
        }
        
        // Finalizar processo
        setCurrentStep(5);
        setTranscription('Esta Ã© uma transcriÃ§Ã£o simulada para teste. O conteÃºdo aborda matemÃ¡tica, ciÃªncias e histÃ³ria com diversos conceitos importantes para a educaÃ§Ã£o.');
        
        // Gerar questÃµes mocadas
        const mockQuestions = {
            "MatemÃ¡tica": [
                ["A matemÃ¡tica Ã© uma ciÃªncia exata que estuda nÃºmeros e formas", "Verdadeiro"],
                ["Todas as operaÃ§Ãµes matemÃ¡ticas sÃ£o irreversÃ­veis", "Falso"],
                ["O zero Ã© um nÃºmero natural", "Falso"]
            ],
            "CiÃªncias": [
                ["A fotossÃ­ntese Ã© um processo realizado pelas plantas", "Verdadeiro"],
                ["A Ã¡gua ferve a 90 graus Celsius ao nÃ­vel do mar", "Falso"],
                ["Os seres vivos sÃ£o compostos por cÃ©lulas", "Verdadeiro"]
            ],
            "HistÃ³ria": [
                ["O Brasil foi descoberto em 1500", "Verdadeiro"],
                ["A Segunda Guerra Mundial comeÃ§ou em 1945", "Falso"],
                ["Dom Pedro I proclamou a independÃªncia do Brasil", "Verdadeiro"]
            ]
        };

        localStorage.setItem('generatedQuestions', JSON.stringify(mockQuestions));
        setQuestionsGenerated(true);
        setIsProcessing(false);

        DarkSwal.fire({
            title: "ðŸ§ª Teste ConcluÃ­do!",
            text: "QuestÃµes mockadas geradas com sucesso para teste da interface.",
            icon: "success"
        });

    }, []);

    const processAudio = useCallback(async (audioFile, quizName, quizDescription) => {
        if (!quizName || !quizDescription || !audioFile) {
            DarkSwal.fire({
                title: "Campos obrigatÃ³rios!",
                text: "Por favor, preencha o nome, descriÃ§Ã£o e faÃ§a o upload de um Ã¡udio.",
                icon: "warning"
            });
            return false;
        }

        // Validar formato do arquivo
        const validFormats = ['mp3', 'mp4', 'mpeg', 'mpga', 'm4a', 'wav', 'webm'];
        const fileExtension = audioFile.name.split('.').pop().toLowerCase();
        
        if (!validFormats.includes(fileExtension)) {
            DarkSwal.fire({
                title: "Formato invÃ¡lido!",
                text: "Por favor, selecione um arquivo nos formatos: mp3, mp4, mpeg, mpga, m4a, wav, webm",
                icon: "warning"
            });
            return false;
        }

        // Validar tamanho do arquivo (100MB mÃ¡ximo)
        const maxSize = 100 * 1024 * 1024;
        if (audioFile.size > maxSize) {
            DarkSwal.fire({
                title: "Arquivo muito grande!",
                text: "O arquivo deve ter no mÃ¡ximo 100MB.",
                icon: "warning"
            });
            return false;
        }

        // Mostrar aviso de modo teste
        const result = await DarkSwal.fire({
            title: "ðŸ§ª Modo de Teste Ativado",
            text: "O backend estÃ¡ com problemas. Deseja continuar com dados simulados para testar a interface?",
            icon: "question",
            showCancelButton: true,
            confirmButtonText: "Sim, testar interface",
            cancelButtonText: "Cancelar"
        });

        if (!result.isConfirmed) {
            return false;
        }

        setIsProcessing(true);
        setError(null);
        setCurrentStep(0);
        setSessionId('test-session-' + Date.now());
        cleanup();

        try {
            await simulateProgress();
            return true;
        } catch (error) {
            setError('Erro no modo de teste: ' + error.message);
            setIsProcessing(false);
            cleanup();
            
            DarkSwal.fire({
                title: "Erro no teste!",
                text: error.message,
                icon: "error"
            });
            return false;
        }
    }, [simulateProgress, cleanup]);

    const getCurrentStepInfo = useCallback(() => {
        return steps[currentStep] || steps[0];
    }, [currentStep]);

    const getOverallProgress = useCallback(() => {
        const stepProgress = currentStep / (steps.length - 1);
        
        if (currentStep === 2 && progress.total > 0) {
            const transcriptionProgress = progress.done / progress.total;
            return Math.min(((currentStep + transcriptionProgress) / (steps.length - 1)) * 100, 100);
        }
        
        return stepProgress * 100;
    }, [currentStep, progress, steps.length]);

    return {
        isProcessing,
        currentStep,
        sessionId,
        chunks,
        transcription,
        progress,
        error,
        questionsGenerated,
        steps,
        processAudio,
        resetState,
        cleanup,
        getCurrentStepInfo,
        getOverallProgress,
        isComplete: questionsGenerated && !isProcessing,
        hasError: !!error
    };
};

export default useAudioProcessingTestMode;
